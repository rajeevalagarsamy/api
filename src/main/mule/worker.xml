<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:apikit="http://www.mulesoft.org/schema/mule/mule-apikit" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd http://www.mulesoft.org/schema/mule/mule-apikit http://www.mulesoft.org/schema/mule/mule-apikit/current/mule-apikit.xsd 
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd">
	<flow name="rcif" doc:id="a46b297e-8c92-4d71-a185-6a042f90fe49" >
		<ee:transform doc:name="Transform Message" doc:id="d14830a3-9084-4e72-9b26-b9bdc31be46c" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json

---
{
	BPMSJSPI: {
		bpmspprequest: {
			bpmspp_txn: Mule::p('bankpro.txn'),
			bpmspp_process_code: Mule::p('bankpro.rcif.pcode'),
			bpmspp_operator_id: attributes.headers.'associateId',
			bpmspp_cif: attributes.headers.'ricfNumber',
			bpmspp_req_chan: attributes.headers.'requestedChannel',
			bpmspp_ext_cdd_edd_flag: " ",
			bpmspp_ret_ids_flag: " ",
			bpmspp_ret_email_flag: " ",
			bpmspp_ret_phones_flag: Mule::p('flag.true') 
		}
	}
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<logger level="INFO" doc:name="Logger" doc:id="8859b675-6332-43ba-8566-83f4481c5057" message="RCIF :  Before BrankPro HTTP Request call ."/>
		<logger level="DEBUG" doc:name="Logger" doc:id="5e2950bf-32ec-43e4-92cd-b1c42cedcbd5" message="#[message.payload]"/>
		<try doc:name="Try" doc:id="6bd7e031-85ac-4829-8949-94c5190600af" >
			<http:request method="POST" doc:name="Request" doc:id="8ea08e19-d2b9-4050-8bb6-dc7d20dff6df" config-ref="HTTP_Request_configuration" path="${http.bankpro.basepath}">
			<http:headers><![CDATA[#[output application/java
---
{
	"HUSERID" : attributes.headers.'associateId',
	"PROCCODE" : "PCPI",
	"Content-Type" : "application/json",
	"Accept" : "application/json"
}]]]></http:headers>
		</http:request>
		</try>
		<logger level="INFO" doc:name="Logger" doc:id="043e67bf-98a5-4f15-852d-f45f8d0f14c1" message="RCIF : BankPro HTTP POST call is successfull."/>
		<logger level="DEBUG" doc:name="Logger" doc:id="e93ba789-f5d0-4c1e-b64b-39ab83e4a687" message="#[message.payload]]"/>
		<ee:transform doc:name="Transform Message" doc:id="23eef639-2120-4291-9167-e620c893b982" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	customerProfile: {
		acceptReject: payload.BPMSJSPO.bpmspresponse.bpmsp_acc_rej_code,
		responseCode: payload.BPMSJSPO.bpmspresponse.bpmsp_response_code.bpmsp_resp_code_pt1,
		customerName: payload.BPMSJSPO.bpmspresponse.bpmsp_cust_name,
		customerRcifTieBreaker: payload.BPMSJSPO.bpmspresponse.bpmsp_tie_breaker,
		customerAddressLine1: payload.BPMSJSPO.bpmspresponse.bpmsp_street_1,
		customerAddressLine2: payload.BPMSJSPO.bpmspresponse.bpmsp_street_2,
		customerAddressLine3: payload.BPMSJSPO.bpmspresponse.bpmsp_street_3,
		customerCity: payload.BPMSJSPO.bpmspresponse.bpmsp_city,
		state: payload.BPMSJSPO.bpmspresponse.bpmsp_state,
		zip: payload.BPMSJSPO.bpmspresponse.bpmsp_zip,
		addressCorrectionCode: payload.BPMSJSPO.bpmspresponse.bpmsp_addr_corr_cd,
		customerForeignMailCodeFlag: payload.BPMSJSPO.bpmspresponse.bpmsp_cust_mail_cd,
		taxId: payload.BPMSJSPO.bpmspresponse.bpmsp_tax_id as Number,
		customerLvlComment1: payload.BPMSJSPO.bpmspresponse.bpmsp_comment_1,
		customerLvlComment2: payload.BPMSJSPO.bpmspresponse.bpmsp_comment_2,
		customerDescriptionCodes: payload.BPMSJSPO.bpmspresponse.bpmsp_desc_cd map ( bpmspdesccd , indexOfBpmspdesccd ) -> {
			descriptionCode: bpmspdesccd
		},
		birthDate: payload.BPMSJSPO.bpmspresponse.bpmsp_birth_dte as String,
		crfStatus: payload.BPMSJSPO.bpmspresponse.bpmsp_crf_status,
		customerFirstName: payload.BPMSJSPO.bpmspresponse.bpmsp_cust_first_name,
		customerMiddleName: payload.BPMSJSPO.bpmspresponse.bpmsp_cust_middle_name,
		customerLastName: payload.BPMSJSPO.bpmspresponse.bpmsp_cust_last_name,
		genderCode: payload.BPMSJSPO.bpmspresponse.bpmsp_gender,
		premierSourceCode: payload.BPMSJSPO.bpmspresponse.bpmsp_prem_srce_cd,
		chargeoffFoundIndicator: payload.BPMSJSPO.bpmspresponse.bpmsp_chrgoff_found,
		privacyCode: payload.BPMSJSPO.bpmspresponse.bpmsp_priv_cd,
		customerId1IssueDate: payload.BPMSJSPO.bpmspresponse.bpmsp_1st_cust_id_iss_dte as String,
		customerId1ExpirationDate: payload.BPMSJSPO.bpmspresponse.bpmsp_1st_cust_id_exp_dte as String,
		customerId1State: payload.BPMSJSPO.bpmspresponse.bpmsp_1st_cust_id_st,
		customerId1DriversLicenseNbr: payload.BPMSJSPO.bpmspresponse.bpmsp_1st_cust_id_num,
		customerId1Type: payload.BPMSJSPO.bpmspresponse.bpmsp_1st_cust_id_typ,
		customerId2IssueDate: payload.BPMSJSPO.bpmspresponse.bpmsp_2nd_cust_id_iss_dte as String,
		customerId2ExpirationDate: payload.BPMSJSPO.bpmspresponse.bpmsp_2nd_cust_id_exp_dte as String,
		customerId2IssueCountry: payload.BPMSJSPO.bpmspresponse.bpmsp_2nd_cust_id_iss_cntry,
		customerId2Number: payload.BPMSJSPO.bpmspresponse.bpmsp_2nd_cust_id_num,
		customerId2Type: payload.BPMSJSPO.bpmspresponse.bpmsp_2nd_cust_id_typ,
		secondaryIdIssuer: payload.BPMSJSPO.bpmspresponse.bpmsp_2nd_id_iss,
		countryOfCitizenship: payload.BPMSJSPO.bpmspresponse.bpmsp_cntry_of_ctzn,
		citizenForeignEntity: payload.BPMSJSPO.bpmspresponse.bpmsp_ctzn_for_ent,
		firstContactDate: payload.BPMSJSPO.bpmspresponse.bpmsp_1st_cont_dte as String,
		lastMaintenanceDate: payload.BPMSJSPO.bpmspresponse.bpmsp_last_maint_dte as String,
		dateOfDeath: payload.BPMSJSPO.bpmspresponse.bpmsp_dte_of_death as String,
		countryOfBirth: payload.BPMSJSPO.bpmspresponse.bpmsp_cntry_of_birth,
		ibn: payload.BPMSJSPO.bpmspresponse.bpmsp_ibn,
		employer: payload.BPMSJSPO.bpmspresponse.bpmsp_employer,
		employmentDate: payload.BPMSJSPO.bpmspresponse.bpmsp_empl_dte as String,
		employmentStatusCode: payload.BPMSJSPO.bpmspresponse.bpmsp_empl_stat_cd,
		employmentAddressLine1: payload.BPMSJSPO.bpmspresponse.bpmsp_empl_addr_1,
		employmentAddressLine2: payload.BPMSJSPO.bpmspresponse.bpmsp_empl_addr_2,
		employmentAddressLine3: payload.BPMSJSPO.bpmspresponse.bpmsp_empl_addr_3,
		employerCityCountry: payload.BPMSJSPO.bpmspresponse.bpmsp_empl_city_cntry,
		employerState: payload.BPMSJSPO.bpmspresponse.bpmsp_empl_st,
		employeeZip: payload.BPMSJSPO.bpmspresponse.bpmsp_empl_zip,
		employeeForeignMailCodeFlag: payload.BPMSJSPO.bpmspresponse.bpmsp_empl_for_mail_cd,
		occupationCode: payload.BPMSJSPO.bpmspresponse.bpmsp_occ_cd,
		studentStatus: payload.BPMSJSPO.bpmspresponse.bpmsp_stud_stat,
		studentSchoolName: payload.BPMSJSPO.bpmspresponse.bpmsp_stud_school_name,
		ownRentCode: payload.BPMSJSPO.bpmspresponse.bpmsp_own_rent_cd,
		privateWealthCode: payload.BPMSJSPO.bpmspresponse.bpmsp_priv_wealth_cd,
		wealthSourceCode: payload.BPMSJSPO.bpmspresponse.bpmsp_wealth_srce_cd,
		wealthSourceDescription: payload.BPMSJSPO.bpmspresponse.bpmsp_wealth_srce_desc,
		referralCode: payload.BPMSJSPO.bpmspresponse.bpmsp_ref_cd,
		customerEmailAddressInfo: payload.BPMSJSPO.bpmspresponse.bpmsp_cust_email_info map ( bpmspcustemailinfo , indexOfBpmspcustemailinfo ) -> {
			emailAddress: bpmspcustemailinfo.bpmsp_email_addr,
			emailType: bpmspcustemailinfo.bpmsp_email_typ,
			emailRestrict1Flag: bpmspcustemailinfo.bpmsp_email_res_1,
			emailRestrict2Flag: bpmspcustemailinfo.bpmsp_email_res_2
		},
		customerPhoneNumberInfo: payload.BPMSJSPO.bpmspresponse.bpmsp_cust_phone_info map ( bpmspcustphoneinfo , indexOfBpmspcustphoneinfo ) -> {
			phoneNumber: bpmspcustphoneinfo.bpmsp_cust_ph_num as String,
			prefix: bpmspcustphoneinfo.bpmsp_cust_ph_pref,
			extension: bpmspcustphoneinfo.bpmsp_cust_ph_ext,
			primaryFlag: bpmspcustphoneinfo.bpmsp_cust_pri_ph_flag,
			customerReference: bpmspcustphoneinfo.bpmsp_cust_ph_refer,
			bestTimeToCall: bpmspcustphoneinfo.bpmsp_cust_ph_acc_flag,
			deviceType: bpmspcustphoneinfo.bpmsp_cust_ph_dev_typ,
			smsTextFlag: bpmspcustphoneinfo.bpmsp_cust_ph_txt_flag,
			faxFlag: bpmspcustphoneinfo.bpmsp_cust_ph_fax_flag,
			teleUseRest1Flag: bpmspcustphoneinfo.bpmsp_cust_ph_use_res_1,
			teleUseRest2Flag: bpmspcustphoneinfo.bpmsp_cust_ph_use_res_2
		},
		dualCitizenCountry: payload.BPMSJSPO.bpmspresponse.bpmsp_dual_ctzn_cntry,
		visaType: payload.BPMSJSPO.bpmspresponse.bpmsp_visa_typ,
		residencyApplication: payload.BPMSJSPO.bpmspresponse.bpmsp_res_appl,
		countryOfResidence: payload.BPMSJSPO.bpmspresponse.bpmsp_nra_cntry_of_res,
		nraSavingsCode: payload.BPMSJSPO.bpmspresponse.bpmsp_nra_sav_cd,
		nraExpenseCode: payload.BPMSJSPO.bpmspresponse.bpmsp_nra_exp_cd,
		nraDepositCode: payload.BPMSJSPO.bpmspresponse.bpmsp_nra_dep_cd,
		nraTravelCode: payload.BPMSJSPO.bpmspresponse.bpmsp_nra_trav_cd,
		nraOtherRequirements: payload.BPMSJSPO.bpmspresponse.bpmsp_nra_oth_req_cd,
		nraOtherRequirementsDesc: payload.BPMSJSPO.bpmspresponse.bpmsp_nra_oth_req_desc,
		nraPresenceCode: payload.BPMSJSPO.bpmspresponse.bpmsp_nra_pres_cd,
		nraPresenceDesc: payload.BPMSJSPO.bpmspresponse.bpmsp_nra_pres_desc,
		nraStayCode: payload.BPMSJSPO.bpmspresponse.bpmsp_nra_stay_cd,
		studentSupportCode: payload.BPMSJSPO.bpmspresponse.bpmsp_stud_supp_cd,
		studentSupportDesc: payload.BPMSJSPO.bpmspresponse.bpmsp_stud_supp_desc,
		pepIndicator: payload.BPMSJSPO.bpmspresponse.bpmsp_pep_flag,
		pepStatus: payload.BPMSJSPO.bpmspresponse.bpmsp_pep_stat,
		pepRelationship: payload.BPMSJSPO.bpmspresponse.bpmsp_pep_rel,
		pepPosition: payload.BPMSJSPO.bpmspresponse.bpmsp_pep_pos,
		pepCountry: payload.BPMSJSPO.bpmspresponse.bpmsp_pep_cntry,
		accessCheckCardFlag: payload.BPMSJSPO.bpmspresponse.bpmsp_acc_chk_card_flag,
		accessChecksFlag: payload.BPMSJSPO.bpmspresponse.bpmsp_acc_chks_flag,
		accessOnlineBankingFlag: payload.BPMSJSPO.bpmspresponse.bpmsp_acc_onl_bank_flag,
		accessWireTransferFlag: payload.BPMSJSPO.bpmspresponse.bpmsp_acc_wire_trans_flag,
		accessDepositCaptrueFlag: payload.BPMSJSPO.bpmspresponse.bpmsp_acc_dep_capt_flag,
		accessCashFlag: payload.BPMSJSPO.bpmspresponse.bpmsp_acc_cash_flag,
		monthlyCashDepositCode: payload.BPMSJSPO.bpmspresponse.bpmsp_mthly_cash_dep_cd,
		monthlyCashWithdrawalCode: payload.BPMSJSPO.bpmspresponse.bpmsp_mthly_cash_wd_cd,
		wireTransferCode: payload.BPMSJSPO.bpmspresponse.bpmsp_wire_trans_cd,
		wireTransferCountry: payload.BPMSJSPO.bpmspresponse.bpmsp_wire_trans_cntry_cd map ( bpmspwiretranscntrycd , indexOfBpmspwiretranscntrycd ) -> bpmspwiretranscntrycd,
		wireInCode: payload.BPMSJSPO.bpmspresponse.bpmsp_wire_in_cd,
		wireOutCode: payload.BPMSJSPO.bpmspresponse.bpmsp_wire_out_cd,
		cifNumber: payload.BPMSJSPO.bpmspresponse.bpmsp_cif_number as String,
		occupationOtherDesc: payload.BPMSJSPO.bpmspresponse.bpmsp_occup_oth_desc,
		cddRiskSide: payload.BPMSJSPO.bpmspresponse.bpmsp_cdd_risk_code,
		businessOwnerIdInfo: payload.BPMSJSPO.bpmspresponse.bpmsp_bus_owner_id_info map ( bpmspbusowneridinfo , indexOfBpmspbusowneridinfo ) -> {
			businessOwnerIdType: bpmspbusowneridinfo.bpmsp_bus_owner_id_type,
			businessOwnerIdIssuer: bpmspbusowneridinfo.bpmsp_bus_owner_id_issuer,
			businessOwnerIdNumber: bpmspbusowneridinfo.bpmsp_bus_owner_id_number,
			businessOwnerIdIssueDate: bpmspbusowneridinfo.bpmsp_bus_owner_id_iss_dt as String,
			businessOwnerIdExpDate: bpmspbusowneridinfo.bpmsp_bus_owner_id_exp_dt as String
		},
		customerNameSuffix: payload.BPMSJSPO.bpmspresponse.bpmsp_cust_suffix
	}
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<logger level="DEBUG" doc:name="Logger" doc:id="635e57f4-1658-4166-b846-313d66131769" message="#[message.payload]"/>
	</flow>
	<flow name="name" doc:id="02046b46-60ee-4ff2-a2a9-b41e042a985e" >
		<ee:transform doc:name="Transform Message" doc:id="378239f3-0367-40eb-b4a7-54899163c035" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json



---
{
	BPMSJSTI: {
		bpmstrequest: {
			bpmst_txn: Mule::p('bankpro.txn'),
			bpmst_operator_id: attributes.headers.'associateId',
			bpmst_process_code: Mule::p('bankpro.name.pcode'),
			bpmst_customer_bank_no: attributes.headers.'bankNumber',
			bpmst_customer_name: attributes.headers.'name',
			bpmst_match_cde: " ",
			bpmst_pers_bus_code: attributes.headers.'personalBusinessCode',
			bpmst_sales_svcs_flag: Mule::p('flag.true')
			
		}
	}
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<logger level="INFO" doc:name="Logger" doc:id="f705d97c-b3c6-41f9-b817-79635af77552" message="NAME :  Before BrankPro HTTP Request call ." />
		<logger level="DEBUG" doc:name="Logger" doc:id="cd968bb4-c5ab-42a4-be7b-8bf7552af80a" message="#[message.payload]"/>
		<try doc:name="Try" doc:id="0fbbb991-a762-4eb2-ba8d-797a1c57ec90" >
			<http:request method="POST" doc:name="Request" doc:id="6d227d4f-9b90-4434-80ec-e5257819ce51" config-ref="HTTP_Request_configuration" path="${http.bankpro.basepath}">
			<http:headers><![CDATA[#[output application/java
---
{
	"HUSERID" : attributes.headers.'associateId',
	"PROCCODE" : "PCPI",
	"Content-Type" : "application/json",
	"Accept" : "application/json"
}]]]></http:headers>
		</http:request>
		</try>
		<logger level="DEBUG" doc:name="Logger" doc:id="a66b3e37-6d41-4589-9ae7-f4c78043769b" message="#[message.payload]"/>
		<logger level="INFO" doc:name="Logger" doc:id="c79632ab-3b6e-47e2-a161-bf61eeaa04c5" message="NAME : BankPro HTTP POST call is successfull."/>
		<ee:transform doc:name="Transform Message" doc:id="8a1dc7dc-92d3-4743-b16f-2bf5da151b5c" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	customerSearch: payload.BPMSJSTO.bpmstresponse.bpmst_response_code.bpmst_cust_name filter( $ != "") map ( bpmstcustname , indexOfBpmstcustname ) -> {
		acceptReject: payload.BPMSJSTO.bpmstresponse.bpmst_acc_rej_code default "",
		responseCode: payload.BPMSJSTO.bpmstresponse.bpmst_response_code.bpmst_resp_code_pt1 default "",
		numberSent: payload.BPMSJSTO.bpmstresponse.bpmst_response_code.bpmst_number_sent default 0,
		ricfCustomerNumber: payload.BPMSJSTO.bpmstresponse.bpmst_response_code.bpmst_rcif_cust_num[indexOfBpmstcustname],
		customerName: bpmstcustname,
		tieBreaker: payload.BPMSJSTO.bpmstresponse.bpmst_response_code.bpmst_tie_breaker[indexOfBpmstcustname],
		addressLine1: payload.BPMSJSTO.bpmstresponse.bpmst_response_code.bpmst_address_line1[indexOfBpmstcustname],
		addressLine2: payload.BPMSJSTO.bpmstresponse.bpmst_response_code.bpmst_addr_line2[indexOfBpmstcustname],
		addressLine3: payload.BPMSJSTO.bpmstresponse.bpmst_response_code.bpmst_addr_line3[indexOfBpmstcustname],
		city: payload.BPMSJSTO.bpmstresponse.bpmst_response_code.bpmst_city[indexOfBpmstcustname],
		state: payload.BPMSJSTO.bpmstresponse.bpmst_response_code.bpmst_state[indexOfBpmstcustname],
		zip: payload.BPMSJSTO.bpmstresponse.bpmst_response_code.bpmst_zip[indexOfBpmstcustname],
		tin: payload.BPMSJSTO.bpmstresponse.bpmst_response_code.bpmst_tin_number[indexOfBpmstcustname],
		relationship: payload.BPMSJSTO.bpmstresponse.bpmst_response_code.bpmst_relationship[indexOfBpmstcustname],
		personalBusiness: payload.BPMSJSTO.bpmstresponse.bpmst_response_code.bpmst_per_bus_code default "",
		crfStatus: payload.BPMSJSTO.bpmstresponse.bpmst_response_code.bpmst_crf_status[indexOfBpmstcustname],
		originalSearchName: payload.BPMSJSTO.bpmstresponse.bpmst_response_code.bpmst_orig_search_name default "",
		matchCode: payload.BPMSJSTO.bpmstresponse.bpmst_response_code.bpmst_match_code default "",
		accountNumber: payload.BPMSJSTO.bpmstresponse.bpmst_response_code.bpmst_acct_number default "",
		application: payload.BPMSJSTO.bpmstresponse.bpmst_response_code.bpmst_appl_code default "",
		bankNumber: payload.BPMSJSTO.bpmstresponse.bpmst_response_code.bpmst_bank_number default "",
		moreCustomersAvailable: payload.BPMSJSTO.bpmstresponse.bpmst_response_code.bpmst_more_customers_avail default "",
		availableFilter: payload.BPMSJSTO.bpmstresponse.bpmst_response_code.bpmst_filler default "",
		genderCode: payload.BPMSJSTO.bpmstresponse.bpmst_response_code.bpmst_sex_code default "",
		dateOfBirth: payload.BPMSJSTO.bpmstresponse.bpmst_response_code.bpmst_date_of_birth[indexOfBpmstcustname]
	} 
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<logger level="DEBUG" doc:name="Logger" doc:id="c0bc1d9f-4229-48a3-97f9-e760dd877763" message="#[message.payload]"/>
	</flow>
	<flow name="tin" doc:id="d472841b-7c72-40f4-94a1-3230cdd4890a" >
		<ee:transform doc:name="Transform Message" doc:id="07529c91-1d4a-4724-8357-c12946bfcbad" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json

 
---
{
	BPMSJSTI: {
		bpmstrequest: {
			bpmst_txn: Mule::p('bankpro.txn'),
			bpmst_operator_id: attributes.headers.'associateId',
			bpmst_process_code: Mule::p('bankpro.tin.pcode'),
			bpmst_tax_id: attributes.headers.'tinId' as Number,
			bpmst_customer_bank_no: attributes.headers.'bankNumber',
			bpmst_pers_bus_code: attributes.headers.'personalBusinessCode',
			bpmst_sales_svcs_flag: Mule::p('flag.true')
		}
	}
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<logger level="DEBUG" doc:name="Logger" doc:id="b604307e-9318-4d8d-97f8-7ba5ce897429" message="#[message.payload]"/>
		<logger level="INFO" doc:name="Logger" doc:id="88c8227d-8ec0-47fd-a169-0cda79e3322f" message="TIN :  Before BrankPro HTTP Request call ."/>
		<try doc:name="Try" doc:id="2e40c9fc-625c-4b5d-9097-265e3071ef4a" >
			<http:request method="POST" doc:name="Request" doc:id="c894159c-e1b2-4fdb-ae94-3bade74dd126" config-ref="HTTP_Request_configuration" path="${http.bankpro.basepath}">
			<http:headers><![CDATA[#[output application/java
---
{
	"HUSERID" : attributes.headers.'associateId',
	"PROCCODE" : "PCPI",
	"Content-Type" : "application/json",
	"Accept" : "application/json"
}]]]></http:headers>
		</http:request>
		</try>
		<logger level="DEBUG" doc:name="Logger" doc:id="fc706e21-ebb9-42ea-b222-e291b8f9987f" message="#[message.payload]"/>
		<logger level="INFO" doc:name="Logger" doc:id="ffb5a4f0-9082-4dda-a8ed-28e68503a50e" message="TIN : BankPro HTTP POST call is successfull."/>
		<ee:transform doc:name="Transform Message" doc:id="73f2b2c6-93c6-4c9b-a026-9369b1b703e1" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	customerSearch: payload.BPMSJSTO.bpmstresponse.bpmst_response_code.bpmst_cust_name filter( $ != "") map ( bpmstcustname , indexOfBpmstcustname ) -> {
		acceptReject: payload.BPMSJSTO.bpmstresponse.bpmst_acc_rej_code default "",
		responseCode: payload.BPMSJSTO.bpmstresponse.bpmst_response_code.bpmst_resp_code_pt1 default "",
		numberSent: payload.BPMSJSTO.bpmstresponse.bpmst_response_code.bpmst_number_sent default 0,
		ricfCustomerNumber: payload.BPMSJSTO.bpmstresponse.bpmst_response_code.bpmst_rcif_cust_num[indexOfBpmstcustname],
		customerName: bpmstcustname,
		tieBreaker: payload.BPMSJSTO.bpmstresponse.bpmst_response_code.bpmst_tie_breaker[indexOfBpmstcustname],
		addressLine1: payload.BPMSJSTO.bpmstresponse.bpmst_response_code.bpmst_address_line1[indexOfBpmstcustname],
		addressLine2: payload.BPMSJSTO.bpmstresponse.bpmst_response_code.bpmst_addr_line2[indexOfBpmstcustname],
		addressLine3: payload.BPMSJSTO.bpmstresponse.bpmst_response_code.bpmst_addr_line3[indexOfBpmstcustname],
		city: payload.BPMSJSTO.bpmstresponse.bpmst_response_code.bpmst_city[indexOfBpmstcustname],
		state: payload.BPMSJSTO.bpmstresponse.bpmst_response_code.bpmst_state[indexOfBpmstcustname],
		zip: payload.BPMSJSTO.bpmstresponse.bpmst_response_code.bpmst_zip[indexOfBpmstcustname],
		tin: payload.BPMSJSTO.bpmstresponse.bpmst_response_code.bpmst_tin_number[indexOfBpmstcustname],
		relationship: payload.BPMSJSTO.bpmstresponse.bpmst_response_code.bpmst_relationship[indexOfBpmstcustname],
		personalBusiness: payload.BPMSJSTO.bpmstresponse.bpmst_response_code.bpmst_per_bus_code default "",
		crfStatus: payload.BPMSJSTO.bpmstresponse.bpmst_response_code.bpmst_crf_status[indexOfBpmstcustname],
		originalSearchName: payload.BPMSJSTO.bpmstresponse.bpmst_response_code.bpmst_orig_search_name default "",
		matchCode: payload.BPMSJSTO.bpmstresponse.bpmst_response_code.bpmst_match_code default "",
		accountNumber: payload.BPMSJSTO.bpmstresponse.bpmst_response_code.bpmst_acct_number default "",
		application: payload.BPMSJSTO.bpmstresponse.bpmst_response_code.bpmst_appl_code default "",
		bankNumber: payload.BPMSJSTO.bpmstresponse.bpmst_response_code.bpmst_bank_number default "",
		moreCustomersAvailable: payload.BPMSJSTO.bpmstresponse.bpmst_response_code.bpmst_more_customers_avail default "",
		availableFilter: payload.BPMSJSTO.bpmstresponse.bpmst_response_code.bpmst_filler default "",
		genderCode: payload.BPMSJSTO.bpmstresponse.bpmst_response_code.bpmst_sex_code default "",
		dateOfBirth: payload.BPMSJSTO.bpmstresponse.bpmst_response_code.bpmst_date_of_birth[indexOfBpmstcustname]
	} 
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<logger level="DEBUG" doc:name="Logger" doc:id="a72d80c6-4dcd-4e8f-b2b9-78fcede82a23" message="#[message.payload]"/>
	</flow>


    
</mule>
